#!/usr/bin/env node

/**
 * unlike the default express www file.
 * This one is modified to run in an async mode.
 *
 * this mode wil allow us to run async tasks before starting the server.
 */
const debug = require('debug')('express-xmongo:server');
const http = require('http');
const {connectToDb} = require('../database/xmongo');


async function startAppAsync() {
  // Connect to the database
  await connectToDb();
  
  /**
   * Since app is required after the database is connected,
   * all routes will be able to use the database connection.
   */
  const app = require('../app');
  
  
  /**
   * Get port from environment and store in Express.
   */
  const port = normalizePort(process.env.PORT || '3000');
  app.set('port', port);
  
  /**
   * Create HTTP server.
   */
  const server = http.createServer(app);
  
  /**
   * Listen on provided port, on all network interfaces.
   */
  
  server.listen(port);
  server.on('error', onError);
  server.on('listening', () => {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
  });
  
  /**
   * Normalize a port into a number, string, or false.
   */
  function normalizePort(val) {
    const port = parseInt(val, 10);
    
    if (isNaN(port)) {
      // named pipe
      return val;
    }
    
    if (port >= 0) {
      // port number
      return port;
    }
    
    return false;
  }
  
  /**
   * Event listener for HTTP server "error" event.
   */
  
  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }
    
    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;
    
    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }
}

startAppAsync().catch(console.log);

